---
---

<section class="hero">
  <div class="hero-background">
    <canvas id="heroCanvas"></canvas>
  </div>
  <div class="container">
    <h1>Revolutionizing<br>Emergency Care with<br>AI Insights</h1>
    <p>Our Clinical Decision Support System seamlessly integrates with existing workflows to streamline patient documentation and provide access to clinical patient information.</p>
    <a href="#contact" class="btn btn-primary">Get in touch</a>
  </div>
</section>

<script>
  interface ParticleProps {
    x: number;
    y: number;
    size: number;
    speedX: number;
    speedY: number;
    color: string;
    alpha: number;
    canvas: HTMLCanvasElement;
  }

  class Particle implements ParticleProps {
    x: number;
    y: number;
    size: number;
    speedX: number;
    speedY: number;
    color: string;
    alpha: number;
    canvas: HTMLCanvasElement;

    constructor(x: number, y: number, canvas: HTMLCanvasElement) {
      this.x = x;
      this.y = y;
      this.canvas = canvas;
      this.size = Math.random() * 2 + 1;
      this.speedX = Math.random() * 1 - 0.5;
      this.speedY = Math.random() * 1 - 0.5;
      this.color = '#4CAF50';
      this.alpha = Math.random() * 0.5 + 0.1;
    }

    update(): void {
      this.x += this.speedX;
      this.y += this.speedY;

      if (this.size > 0.2) this.size -= 0.01;

      if (this.x < 0 || this.x > this.canvas.width) this.speedX *= -1;
      if (this.y < 0 || this.y > this.canvas.height) this.speedY *= -1;
    }

    draw(ctx: CanvasRenderingContext2D): void {
      ctx.save();
      ctx.globalAlpha = this.alpha;
      ctx.fillStyle = this.color;
      ctx.beginPath();
      ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
      ctx.fill();
      ctx.restore();
    }
  }

  function initCanvas(): void {
    const canvas = document.querySelector('#heroCanvas') as HTMLCanvasElement;
    if (!canvas) return;

    const ctx = canvas.getContext('2d');
    if (!ctx) return;

    const particles: Particle[] = [];

    function resizeCanvas(): void {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight * 0.8;
    }

    function createParticles(): void {
      for (let i = 0; i < 100; i++) {
        particles.push(
          new Particle(
            Math.random() * canvas.width,
            Math.random() * canvas.height,
            canvas
          )
        );
      }
    }

    function connectParticles(context: CanvasRenderingContext2D): void {
      for (let i = 0; i < particles.length; i++) {
        for (let j = i; j < particles.length; j++) {
          const dx = particles[i].x - particles[j].x;
          const dy = particles[i].y - particles[j].y;
          const distance = Math.sqrt(dx * dx + dy * dy);

          if (distance < 100) {
            context.beginPath();
            context.strokeStyle = `rgba(76, 175, 80, ${0.2 - distance/100})`;
            context.moveTo(particles[i].x, particles[i].y);
            context.lineTo(particles[j].x, particles[j].y);
            context.stroke();
          }
        }
      }
    }

    function animate(): void {
      if (!ctx) return;
      
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      
      particles.forEach(particle => {
        particle.update();
        particle.draw(ctx);
      });

      connectParticles(ctx);
      requestAnimationFrame(animate);
    }

    window.addEventListener('resize', resizeCanvas);
    resizeCanvas();
    createParticles();
    animate();
  }

  // Wait for the DOM to be fully loaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initCanvas);
  } else {
    initCanvas();
  }
</script>

<style>
  .hero {
    position: relative;
    background: #1a1a1a;
    color: white;
    padding: 6rem 0;
    min-height: 80vh;
    display: flex;
    align-items: center;
    overflow: hidden;
  }

  .hero-background {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    opacity: 0.2;
  }

  .container {
    position: relative;
    z-index: 1;
  }

  .hero h1 {
    font-size: 3rem;
    margin-bottom: 1.5rem;
    line-height: 1.2;
  }

  .hero p {
    font-size: 1.2rem;
    margin-bottom: 2rem;
    max-width: 600px;
    opacity: 0.9;
  }

  @media (max-width: 768px) {
    .hero h1 {
      font-size: 2rem;
    }
    
    .hero p {
      font-size: 1rem;
    }
  }
</style>